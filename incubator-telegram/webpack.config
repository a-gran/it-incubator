const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const path = require('path')
const webpackNodeExternals = require('webpack-node-externals')

const browserConfig = {
  mode: 'production',
  optimization: {
    splitChunks: {
      cacheGroups: {
        styles: {
          name: 'styles',
          test: /\.css$/,
          chunks: 'all',
          enforce: true
        }
      }
    }
  },
  entry: './client/index.js',
  output: {
    path: path.resolve(__dirname, './static/'),
    filename: 'client.js'
  },
  devtool: 'cheap-module-source-map',
  module: {
    rules: [
      {
        test: [/\.svg$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
        loader: 'file-loader',
        options: {
          name: 'media/[name].[ext]',
          publicPath: url => url.replace(/static/, '')
        }
      },
      {
        test: /\.css$/,
        use: [MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader']
      },
      {
        test: /\.s[ac]ss$/i,
        use: [
          'style-loader',
          'css-loader',
          'postcss-loader',
          'sass-loader',
          {
            loader: 'sass-resources-loader',
            options: {
              resources: path.join(__dirname, '/src/assets/scss/_variables.scss')
            }
          }
        ]
      },
      {
        test: /js$/,
        exclude: /(node_modules)/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react'],
            plugins: [
              '@babel/plugin-proposal-object-rest-spread',
              '@babel/plugin-transform-runtime'
            ]
          }
        }
      }
    ]
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: '[name].css'
    })
  ]
}

const serverConfig = {
  entry: './server/bootstrap.js',
  mode: 'production',
  externals: [webpackNodeExternals()],
  target: 'node',
  output: {
    path: path.resolve(__dirname, './build/'),
    filename: 'backend.js',
    libraryTarget: 'commonjs2'
  },
  devtool: 'cheap-module-source-map',
  module: {
    rules: [
      {
        test: [/\.svg$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
        loader: 'file-loader',
        options: {
          name: 'media/[name].[ext]',
          publicPath: url => url.replace(/static/, ''),
          emit: false
        }
      },
      {
        test: /\.(sa|sc|c)ss$/,
        use: [
          'null-loader',
        ]
      },
      {
        test: /\.css$/,
        use: [MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader']
      },
      // {
      //   test: /\.css$/,
      //   loader: 'css-loader',
      //   options: {
      //     onlyLocals: true
      //   }
      // },
      // {
      //   test: /\.s[ac]ss$/i,
      //   use: [
      //     'isomorphic-style-loader',
      //     'css-loader',
      //     'sass-loader',
      //     {
      //       loader: 'sass-resources-loader',
      //       options: {
      //         resources: path.join(__dirname, '/src/assets/scss/_variables.scss')
      //       }
      //     }
      //   ]
      // },
      {
        test: /\.m?js$/,
        exclude: /(node_modules|bower_components)/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react'],
            plugins: [
              '@babel/plugin-proposal-object-rest-spread',
              '@babel/plugin-transform-runtime'
            ]
          }
        }
      }
    ]
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: '[name].css'
    })
  ]
}

module.exports = [browserConfig, serverConfig]
